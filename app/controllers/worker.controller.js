const db = require('../models')const Worker = db.workerconst Employments = db.employment// Create and Save a new Workerexports.create = (req, res) => {  const { first_name, last_name, middle_name, employments } = req.body  //Validate request  if (!first_name || !last_name || !middle_name || !employments) {    res.status(400).send({ message: 'Content can not be empty!' })    return  }  // Create a Worker  const worker = {    first_name,    last_name,    middle_name  }  // Save Worker in the DB  Worker.create(worker)    .then(worker => {      if (req.body.employments) {        Employments.findAll({          where: {            id: employments          }        }).then(employments => {          worker.setEmployments(employments).then(() => {            const worker = {              first_name,              last_name,              middle_name,              employments            }            res.send({ message: 'Worker created successfully', data: worker })          }).catch(err => {            res.status(403).send({ message: err.message })          })        }).catch(err => {          res.status(400).send({            message: 'Employments not found!' || err.message          })        })      } else { // user role = 1        res.status(400).send({ message: 'User was registered successfully', data: worker })      }    }).catch(err => {      res.status(500).send({ message: err.message || 'Some error occurred while creating the Worker.' })    })}// Retrieve all Workers from the database.exports.findAll = (req, res) => {  Worker.findAll()    .then(data => {      res.send(data)    })    .catch(err => {      res.status(500).send({        message: err.message || 'Some error occurred while retrieving Worker.'      })    })}// Find a single Worker with an idexports.findOne = (req, res) => {  const id = req.query.id  Worker.findByPk(id)    .then(data => {      if (data) {        res.send(data)      } else {        res.status(404).send({          message: `Cannot find Worker with id ${id}.`        })      }    })    .catch(err => {      res.status(500).send({        message: err.message || 'Error retrieving Worker with id ' + id      })    })}exports.findByEmplId = (req, res) => {  const id = req.query.id  Employments.findOne({ where: { id } }).then(empl => {    if (!empl) {      return res.status(404).send({ message: 'Employment not found!' })    }    empl.getWorkers().then(workers => {      res.status(200).send({ employment: empl, workers })    }).catch(err => {      res.status(403).send({ message: err.message })    })  }).catch(() => {    res.status(403).send({ message: 'Employment not found!' })  })}// Update a Worker by the id in the requestexports.update = (req, res) => {  const id = req.params.id  Worker.update(req.body, {    where: { id }  }).then(num => {    if (num === 1) {      res.send({        message: 'Worker was updated successfully.'      })    } else {      res.send({        message: `Cannot update Worker with id ${id}. Maybe Worker was not found or req.body is empty!`      })    }  }).catch(err => {    res.status(500).send({      message: err.message || 'Error updating Worker with id ' + id    })  })}// Delete a Worker with the specified id in the requestexports.delete = (req, res) => {  const id = req.params.id  Worker.destroy({    where: { id }  }).then(num => {    if (num === 1) {      res.send({        message: 'Worker was deleted successfully!'      })    } else {      res.send({ message: `Cannot delete Worker with id=${id}. Maybe Worker was not found!` })    }  }).catch(err => {    res.status(500).send({ message: err.message || 'Could not delete Worker with id=' + id })  })}// Delete all Worker from the database.exports.deleteAll = (req, res) => {  Worker.destroy({    where: {},    truncate: false  }).then(nums => {    res.send({      message: `${nums} Worker was deleted successfully!`    }).catch(err => {      res.status(500).send({        message: err.message || 'Some error occurred while removing all Worker.'      })      }    )  })}exports.findAllPublished = (req, res) => {  Worker.findAll({ where: { published: true } })    .then(data => {      res.send(data)    }).catch(err => {      res.status(500).send({        message: err.message || 'Some error occurred while retrieving Worker.'      })  })}